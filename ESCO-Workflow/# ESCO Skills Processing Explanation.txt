ESCO Skills Processing Workflow
==============================

Overview
--------
This workflow extracts, processes, and structures skills data from the European Skills, Competences, Qualifications and Occupations (ESCO) dataset. The processed data is used in a larger project to build a military-relevant skills taxonomy, ultimately mapping ESCO skills to specific military occupational specialties.

What This Workflow Does
-----------------------
Data Acquisition:
- Fetches the raw ESCO dataset from a GitHub repository.
- Contains thousands of records on skills, competences, and sometimes knowledge items.
- Focuses on entries labeled as "skill/competence."

Data Processing and Transformation:
1. Filtering
   - Retains only entries where skillType is "skill/competence."
2. Verb Extraction
   - Takes the first word from ESCO’s preferredLabel field (e.g., "manage" in "manage musical staff").
3. Alternate Labels Parsing
   - Converts the multiline altLabels string into an array of synonyms/phrases.
4. Keyword Extraction
   - Combines skill name, description, and alternate labels into one searchText.
   - Removes short words and basic stopwords, then keeps up to 20 of the most frequent terms as keywords.
5. Unified Structure
   - Stores conceptUri as skillId.
   - Renames preferredLabel to skillName.
   - Preserves reuseLevel, skillType, and description.
   - Processes large sets in batches to avoid memory issues.

Data Storage:
- Outputs a structured JSON that includes:
  1. processedEscoSkills: an array of enhanced skill objects.
  2. metadata: summary info like total entries, count of processed skills, and a timestamp.

- In n8n, the workflow commits this file to a GitHub repo.
- A Python equivalent can also save locally for replication or offline use.

Technical Implementation Details
-------------------------------
n8n Nodes:
1. HTTP Request Node
   - Retrieves raw ESCO JSON from GitHub.
2. ESCO Processing Function
   - Filters data (skillType = "skill/competence"),
   - Extracts verbs, keywords, alternate labels,
   - Builds searchText, etc.
3. GitHub Prep Function
   - Serializes the processed data as JSON
   - Defines file path and commit message
4. GitHub Node
   - Commits the result into a subfolder in your GitHub repository.

Data Structure Transformation
----------------------------
Original Format (Example):
{
  "conceptUri": "http://data.europa.eu/esco/skill/0005c151-5b5a-4a66-8aac-60e734beb1ab",
  "skillType": "skill/competence",
  "preferredLabel": "manage musical staff",
  "altLabels": "manage staff of music\ncoordinate duties of musical staff\nmanage music staff\ndirect musical staff",
  "description": "Assign and manage staff tasks in areas such as scoring, arranging, copying music and vocal coaching."
}

Processed Format (Example):
{
  "skillId": "http://data.europa.eu/esco/skill/0005c151-5b5a-4a66-8aac-60e734beb1ab",
  "skillType": "skill/competence",
  "reuseLevel": "sector-specific",
  "skillName": "manage musical staff",
  "description": "Assign and manage staff tasks in areas such as scoring, arranging, copying music and vocal coaching.",
  "verb": "manage",
  "alternateLabels": [
    "manage staff of music",
    "coordinate duties of musical staff",
    "manage music staff",
    "direct musical staff"
  ],
  "keywords": [
    "staff",
    "manage",
    "musical",
    "music",
    "arranging",
    "scoring",
    "tasks",
    "vocal",
    "coaching",
    "copying"
  ],
  "searchText": "manage musical staff ... assign and manage staff tasks ... etc."
}

In this enhanced structure, fields from ESCO’s original data are retained (e.g., conceptUri, altLabels) while adding a verb field, keywords, and a consolidated searchText to facilitate searching, matching, or classification in downstream tasks.
